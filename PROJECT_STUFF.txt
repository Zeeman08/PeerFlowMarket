***BASIC QUERIES***
1) INSERT: 10 normal, 22 plsql, 32 total
2) UPDATE: 10 normal, 3 plsql, 13 total
3) DELETE: 3 normal, 6 plsql, 9 total

At least 2 user actions that cause insertions spanning 3 or more tables.
-Create store
-Create product

At least 2 user actions that cause updates spanning 2 or more tables.
-removefromcart
-updatefromcart
-update product

At least 1 delete query should initiate cascade delete.
-deleting store deletes all products inside it
-deleting person deletes stores and consequently products, and reviews

At least 2 queries should join 3 or more tables
-getAllStores
-getStoresManagedByPerson
-delivery status checking

QUERIES:

INSERT:
INSERT INTO storefront (STOREFRONT_NAME, CATEGORY_ID, STOREFRONT_DESCRIPTION, IMAGE) VALUES ($1, (SELECT CATEGORY_ID FROM CATEGORIES WHERE CATEGORY_NAME = $2), $3, $4) RETURNING *
==>creating a new storefront

INSERT INTO manages (PERSON_ID, STOREFRONT_ID) VALUES ($1, $2) RETURNING *
==>inserting a new (owner, storefront) relationship

INSERT INTO ACTION_LOG (PERSON_ID, STOREFRONT_ID, ACTION_TYPE) VALUES ($1, $2, 'UPDATE')
==>insertion into action log

INSERT INTO TAG_ASSIGNMENT (PRODUCT_ID, TAG_NAME) VALUES($1, $2) RETURNING *
==>inserting a new (product, tag) relationship

INSERT INTO ACTION_LOG (STOREFRONT_ID, PRODUCT_ID, ACTION_TYPE) VALUES ((SELECT STOREFRONT_ID FROM PRODUCT WHERE PRODUCT_ID = $1), $1, 'UPDATE')
==>insertion into action log

INSERT INTO product (product_name, product_description, stock_count, price, image, storefront_id) VALUES ($1, $2, $3, $4, $5, $6) RETURNING *
==>creating a new product

INSERT INTO tags (tag_name) VALUES ($1) ON CONFLICT (tag_name) DO NOTHING RETURNING *
==>when we try to add a tag which does not exist in the database, it gets created [usecases: while creating and updating a product]

INSERT INTO announcements (PERSON_ID, STOREFRONT_ID, ANNOUNCEMENT_DESCRIPTION, image) VALUES ($1, $2, $3, $4) RETURNING *
==>creating a new announcement by a storefront

INSERT INTO REVIEW (PRODUCT_ID, PERSON_ID, COMMENTS, RATING) VALUES ($1, $2, $3, $4)
==>when a person posts a review for a product

INSERT INTO COMPLAINTS (PERSON_ID, STOREFRONT_ID, COMPLAINT_DETAILS) VALUES ($1, $2, $3) RETURNING *
==>when a person posts a complaint about a storefront



PLSQL insertions
--Checkout procedure
INSERT INTO TRANSACTIONS (PERSON_ID, STOREFRONT_ID, AMOUNT, TRANSACTION_TYPE) VALUES (row_data.person_id, row_data.storefront_id, row_data.total_amount, X) returning * into row_data2
==> all the transactions get properly inserted, because it might happen that the cart contains products from multiple storefronts.

INSERT INTO ORDERS (PRODUCT_ID, QUANTITY, PERSON_ID, TRANSACTION_ID, GROUP_ID, PRICE) SELECT PRODUCT_ID, QUANTITY, PERSON_ID, row_data2.transaction_id, CURR_GROUP, P.PRICE FROM CART C JOIN PRODUCT P USING(PRODUCT_ID) WHERE PERSON_ID = row_data2.person_id AND STOREFRONT_ID = row_data2.storefront_id
==> we just bring the rows with relevant columns into the orders table.

INSERT INTO PLSQL_LOG (PERSON_ID, FUNCTION_NAME, PARAMETERS) VALUES (input_person_id, 'process_cart_and_transactions', 'PARAMETERS {input_person_id: ' || input_person_id || ' X: ' || X || '}')
==> insertion into function call log

--Delete product procedure
INSERT INTO DELETED_PRODUCT (PRODUCT_ID, STOREFRONT_ID, PRODUCT_NAME, PRODUCT_DESCRIPTION, PRICE) SELECT PRODUCT_ID, STOREFRONT_ID, PRODUCT_NAME, PRODUCT_DESCRIPTION, PRICE FROM PRODUCT WHERE PRODUCT_ID = prdid
==> we transfer the products into deleted products table, so that we dont lose any information about any malicious user who might have deleted his account

INSERT INTO ACTION_LOG (storefront_id, product_id, action_type) VALUES(storeid, prdid, 'DELETE')
==>insertion into action log

INSERT INTO PLSQL_LOG (PERSON_ID, FUNCTION_NAME, PARAMETERS) VALUES (pid, 'delete_product_procedure', 'PARAMETERS {prdid: ' || prdid || ' pid: ' || pid || '}');
==>insertion into function call log

--Delete store procedure
INSERT INTO DELETED_STOREFRONT (STOREFRONT_ID, STOREFRONT_NAME, STOREFRONT_DESCRIPTION) SELECT STOREFRONT_ID, STOREFRONT_NAME, STOREFRONT_DESCRIPTION FROM STOREFRONT WHERE STOREFRONT_ID = strid
==> we transfer the storefront into deleted storefronts table

INSERT INTO ACTION_LOG (person_id, storefront_id, action_type) VALUES(pid, strid, 'DELETE')
==>insertion into action log

INSERT INTO PLSQL_LOG (PERSON_ID, FUNCTION_NAME, PARAMETERS) VALUES (pid, 'delete_storefront_procedure', 'PARAMETERS {pid: ' || pid || ' strid: ' || strid || '}');
==>insertion into function call log

--Delete person procedure
INSERT INTO DELETED_PERSON (PERSON_ID, PERSON_NAME, DATE_OF_BIRTH, PHONE, EMAIL) SELECT PERSON_ID, PERSON_NAME, DATE_OF_BIRTH, PHONE, EMAIL FROM PERSON WHERE PERSON_ID = pid
==> we transfer the person into deleted person table, so that we dont lose any information about any malicious user who might have deleted his account

INSERT INTO ACTION_LOG (person_id, action_type) VALUES(pid, 'DELETE')
==> insertion into action log

INSERT INTO PLSQL_LOG (PERSON_ID, FUNCTION_NAME, PARAMETERS) VALUES (pid, 'delete_person_procedure', 'PARAMETERS {pid: ' || pid || '}')
==> insertion into function call log

--Clear cart procedure
INSERT INTO PLSQL_LOG (PERSON_ID, FUNCTION_NAME, PARAMETERS) VALUES (pid, 'clear_cart_procedure', 'PARAMETERS {pid: ' || pid || '}');
==> insertion into function call log

--Check credentials function
INSERT INTO PLSQL_LOG (PERSON_ID, FUNCTION_NAME, PARAMETERS) VALUES (NULL, 'check_credentials_function', 'PARAMETERS {phone_in: ' || phone_in || ' email_in: ' || email_in || '}')
==> insertion into function call log

--Add to cart function
INSERT INTO PLSQL_LOG (PERSON_ID, FUNCTION_NAME, PARAMETERS) VALUES (pid, 'add_to_cart_function', 'PARAMETERS {pid: ' || pid || ' prdid: ' || prdid || ' qty: ' || qty || '}')
==> insertion into function call log

INSERT INTO CART (PERSON_ID, PRODUCT_ID, QUANTITY) VALUES (pid, prdid, qty) ON CONFLICT (PERSON_ID, PRODUCT_ID) DO UPDATE SET QUANTITY = CART.QUANTITY + EXCLUDED.QUANTITY
==> we try to insert the product with its quanitty, to the card, but if product already exists, then just increase the count.

--Is manager of product function
INSERT INTO PLSQL_LOG (PERSON_ID, FUNCTION_NAME, PARAMETERS) VALUES (per_id, 'is_manager_of_product', 'PARAMETERS {per_id: ' || per_id || ' prod_id: ' || prod_id || '}')
==> insertion into function call log

--Is manager of storefront function
INSERT INTO PLSQL_LOG (PERSON_ID, FUNCTION_NAME, PARAMETERS) VALUES (per_id, 'is_manager_of_storefront', 'PARAMETERS {per_id: ' || per_id || ' s_id: ' || s_id || '}')
==> insertion into function call log

--Person insert trigger
INSERT INTO ACTION_LOG (person_id, action_type) VALUES (NEW.person_id, 'CREATE')
==> insertion into action log

--Store create trigger
INSERT INTO ACTION_LOG (person_id, storefront_id, action_type) VALUES (NEW.person_id, NEW.storefront_id, 'ADD');
==> insertion into action log

INSERT INTO ACTION_LOG (person_id, storefront_id, action_type) VALUES (NEW.person_id, NEW.storefront_id, 'CREATE');
==> insertion into action log

--Product create trigger
INSERT INTO ACTION_LOG (storefront_id, product_id, action_type) VALUES (NEW.storefront_id, NEW.product_id, 'CREATE');
==> insertion into action log


Insertions into PLSQL LOG and ACTION LOG are meant for auditing later on from admin side



UPDATE:
UPDATE storefront SET STOREFRONT_NAME = $2, STOREFRONT_DESCRIPTION = $3, last_updated_on = CURRENT_TIMESTAMP WHERE storefront_id = $1 RETURNING *
==> updating informations about a storefront

UPDATE storefront SET STOREFRONT_NAME = $2, STOREFRONT_DESCRIPTION = $3, IMAGE = $4, last_updated_on = CURRENT_TIMESTAMP WHERE storefront_id = $1 RETURNING *
==> updating informations about a storefront if the image attribute is defined in the req.query

UPDATE product SET product_name = $2, product_description = $3, price = $4, stock_count = $5, last_updated_on = CURRENT_TIMESTAMP WHERE product_id = $1 RETURNING *
UPDATE product SET product_name = $2, product_description = $3, price = $4, stock_count = $5, image = $6, last_updated_on = CURRENT_TIMESTAMP WHERE product_id = $1 RETURNING *
==> same logic as updating a storefront

UPDATE storefront SET last_updated_on = CURRENT_TIMESTAMP WHERE storefront_id = (SELECT storefront_id FROM product WHERE product_id = $1)
==> when updating a product, we update the last_updated_on to the current timestamp

UPDATE announcements SET announcement_description = $2, image = $3 WHERE announcement_id = $1 RETURNING *
==> updating an announcement, which the store itself posted

UPDATE CART SET QUANTITY = QUANTITY - 1 WHERE PERSON_ID = $1 AND PRODUCT_ID = $2
==> decreasing quantity of a product in a cart

UPDATE PRODUCT SET STOCK_COUNT = STOCK_COUNT + 1 WHERE PRODUCT_ID = $1
==> increasing the stock count of a product

UPDATE ORDERS SET DELIVERY_STATUS = $1 WHERE GROUP_ID = $2 AND IS_MANAGER_OF_PRODUCT($3, PRODUCT_ID) = 1
==> when the storefront managers change the delivery status of an order, it gets updated in the database

UPDATE REVIEW SET COMMENTS = $1, RATING = $2 WHERE PERSON_ID = $3 AND PRODUCT_ID = $4
==> when a user has already posted a reivew about a store, it gets overwriten, hence an update query


PLSQL updates

--Clear cart procedure
UPDATE PRODUCT SET STOCK_COUNT = STOCK_COUNT + i.quantity WHERE PRODUCT_ID = i.product_id
==>

--Add to cart function
UPDATE PRODUCT SET STOCK_COUNT = STOCK_COUNT - qty WHERE PRODUCT_ID = prdid
==>

--Product purchase trigger
UPDATE PRODUCT SET items_sold = (SELECT items_sold FROM PRODUCT WHERE product_id = NEW.product_id) + NEW.quantity WHERE product_id = NEW.product_id
==> just updating the items sold count of a product by the new order.quantity row





DELETE:
DELETE FROM TAG_ASSIGNMENT WHERE PRODUCT_ID = $1
==> when updating a product, we first remove all its current tags, and then insert new ones.
DELETE FROM announcements where announcement_id = $1
DELETE FROM CART WHERE QUANTITY = 0
==> when we decrease the count of a product in cart, if it gets to 0, we simply just remove those products from cart

PLSQL deletions
--Checkout procedure
DELETE FROM CART WHERE PERSON_ID = INPUT_PERSON_ID;

--Delete product procedure
DELETE FROM PRODUCT WHERE PRODUCT_ID = prdid
DELETE FROM tag_assignment WHERE PRODUCT_ID = prdid

--Delete store procedure
DELETE FROM STOREFRONT WHERE STOREFRONT_ID = strid

--Delete person procedure
DELETE FROM PERSON WHERE PERSON_ID = pid

--Clear cart procedure
DELETE FROM CART WHERE PERSON_ID = pid






***ADVANCED QUERIES***
1) JOIN: 13
2) SUBQUERIES: 7
3) SET: 1

JOIN AND SUBQUERIES MIXED

--getAllStores
SELECT S.*, COALESCE(ROUND(AVG(PRODUCT_RATING)), 0) AS RATING, (SELECT category_name FROM CATEGORIES C WHERE S.category_id = C.category_id) AS CATEGORY FROM STOREFRONT S LEFT OUTER JOIN (SELECT P.PRODUCT_ID, P.STOREFRONT_ID, AVG(R.RATING) AS PRODUCT_RATING FROM PRODUCT P JOIN REVIEW R ON(P.PRODUCT_ID = R.PRODUCT_ID) GROUP BY P.PRODUCT_ID) P1 ON (S.STOREFRONT_ID = P1.STOREFRONT_ID) WHERE S.STOREFRONT_ID IN (SELECT STOREFRONT_ID FROM STOREFRONT STR AND (SELECT CATEGORY_NAME FROM CATEGORIES WHERE CATEGORY_ID = STR.CATEGORY_ID) = '${req.query.category}')
SELECT COUNT(*) FROM STOREFRONT WHERE LOWER(STOREFRONT_NAME) LIKE LOWER('%${req.query.search}%') AND STOREFRONT_ID IN (SELECT STOREFRONT_ID FROM STOREFRONT STR WHERE (SELECT CATEGORY_NAME FROM CATEGORIES WHERE CATEGORY_ID = STR.CATEGORY_ID) = '${req.query.category}')

--getSpecificStore using id
SELECT S.*, COALESCE(ROUND(AVG(PRODUCT_RATING)), 0) AS RATING FROM STOREFRONT S LEFT OUTER JOIN (SELECT P.PRODUCT_ID, P.STOREFRONT_ID, AVG(R.RATING) AS PRODUCT_RATING FROM PRODUCT P JOIN REVIEW R ON(P.PRODUCT_ID = R.PRODUCT_ID) GROUP BY P.PRODUCT_ID) P1 ON (S.STOREFRONT_ID = P1.STOREFRONT_ID) WHERE S.STOREFRONT_ID = ${req.params.id} GROUP BY S.STOREFRONT_ID

--getStoresManagedByPerson
SELECT S.*, COALESCE(ROUND(AVG(PRODUCT_RATING)), 0) AS RATING, (SELECT category_name FROM CATEGORIES C WHERE S.category_id = C.category_id) AS CATEGORY FROM STOREFRONT S LEFT OUTER JOIN (SELECT P.PRODUCT_ID, P.STOREFRONT_ID, AVG(R.RATING) AS PRODUCT_RATING FROM PRODUCT P JOIN REVIEW R ON(P.PRODUCT_ID = R.PRODUCT_ID) GROUP BY P.PRODUCT_ID) P1 ON (S.STOREFRONT_ID = P1.STOREFRONT_ID)  WHERE is_manager_of_storefront(${req.params.id}, S.STOREFRONT_ID) > 0 AND LOWER(S.STOREFRONT_NAME) LIKE LOWER('%${req.query.search}%') AND S.STOREFRONT_ID IN (SELECT STOREFRONT_ID FROM CATEGORY_ASSIGNMENT WHERE CATEGORY_NAME = '${req.query.category}') GROUP BY S.STOREFRONT_ID ORDER BY S.STOREFRONT_ID OFFSET ${offset} LIMIT ${rowsPerPage}

--getSpecificProduct using id
SELECT P.*, COALESCE(AVG(R.RATING), 0) AS PRODUCT_RATING FROM PRODUCT P LEFT OUTER JOIN REVIEW R ON(P.PRODUCT_ID = R.PRODUCT_ID) WHERE P.PRODUCT_ID = ${req.params.productId} GROUP BY P.PRODUCT_ID

--getProductsFromStore using id
SELECT P.*, COALESCE(AVG(R.RATING), 0) AS PRODUCT_RATING, ARRAY_AGG(TA.TAG_NAME) AS TAGS FROM PRODUCT P LEFT OUTER JOIN REVIEW R ON(P.PRODUCT_ID = R.PRODUCT_ID) LEFT OUTER JOIN TAG_ASSIGNMENT TA ON (P.PRODUCT_ID = TA.PRODUCT_ID) WHERE LOWER(P.PRODUCT_NAME) LIKE LOWER('%${req.query.search}%') AND P.PRODUCT_ID IN (SELECT PRODUCT_ID FROM TAG_ASSIGNMENT WHERE LOWER(TAG_NAME) = LOWER('${tags[i]}')) GROUP BY P.PRODUCT_ID HAVING P.STOREFRONT_ID = ${req.params.id} ORDER BY P.PRODUCT_ID

--getAnnouncements
SELECT a.*, s.storefront_name FROM announcements a join storefront s using(storefront_id) ORDER BY POSTED_ON DESC OFFSET $1 LIMIT $2

--getCartUsing id
SELECT * FROM PRODUCT P JOIN CART C ON (P.PRODUCT_ID = C.PRODUCT_ID) WHERE C.PERSON_ID = ${req.params.id} ORDER BY C.PRODUCT_ID

--getProductsFromCart using id
SELECT TEMP.*, COALESCE(C.QUANTITY, 0) AS QUANTITY FROM (SELECT * FROM PRODUCT WHERE PRODUCT_ID = ${req.params.productId}) TEMP LEFT OUTER JOIN CART C ON (TEMP.PRODUCT_ID = C.PRODUCT_ID AND C.PERSON_ID = ${req.params.id})

--getTransactionsForId
SELECT *, IS_MANAGER_OF_STOREFRONT(${req.params.id}, STOREFRONT_ID) AS STATUS FROM TRANSACTIONS JOIN storefront USING(STOREFRONT_ID) WHERE PERSON_ID = ${req.params.id} OR IS_MANAGER_OF_STOREFRONT(${req.params.id}, STOREFRONT_ID) = 1

--getGroupOrder with shopkeeper
SELECT ORDER_ID, PRODUCT_NAME, QUANTITY, PERSON_ID, TRANSACTION_ID, ORDER_TIME, DELIVERY_STATUS, P.PRICE FROM ORDERS O JOIN PRODUCT P USING(PRODUCT_ID) WHERE GROUP_ID = ${req.params.id} AND STOREFRONT_ID IN (SELECT STOREFRONT_ID FROM MANAGES WHERE PERSON_ID = ${req.params.shopkeeperId})

--getGroupOrders with id
SELECT GROUP_ID, MIN(DELIVERY_STATUS) AS DELIVERY_STATUS, MIN(ORDER_TIME) AS order_time FROM ORDERS O JOIN PRODUCT P USING (PRODUCT_ID) JOIN MANAGES USING(STOREFRONT_ID) WHERE MANAGES.PERSON_ID = ${req.params.id} AND DELIVERY_STATUS = ${req.body.delivery_status} GROUP BY GROUP_ID
SELECT GROUP_ID, MIN(DELIVERY_STATUS) AS DELIVERY_STATUS, MIN(ORDER_TIME) AS order_time FROM ORDERS O JOIN PRODUCT P USING (PRODUCT_ID) JOIN MANAGES USING(STOREFRONT_ID) WHERE MANAGES.PERSON_ID = ${req.params.id} GROUP BY GROUP_ID

SET OPERATION USED HERE
--getGroupOrder
SELECT ORDER_ID, PRODUCT_NAME, QUANTITY, PERSON_ID, TRANSACTION_ID, ORDER_TIME, DELIVERY_STATUS, P.PRICE FROM ORDERS O JOIN PRODUCT P USING(PRODUCT_ID) WHERE GROUP_ID = ${req.params.id} UNION SELECT ORDER_ID, PRODUCT_NAME, QUANTITY, PERSON_ID, TRANSACTION_ID, ORDER_TIME, DELIVERY_STATUS, P.PRICE FROM ORDERS O JOIN DELETED_PRODUCT P USING(PRODUCT_ID) WHERE GROUP_ID = ${req.params.id}






***PLSQL***
1) FUNCTIONS: 4
2) PROCEDURES: 5
3) TRIGGERS: 4


--PROCEDURES

--procedure for checkout
CREATE OR REPLACE PROCEDURE process_cart_and_transactions(input_person_id INT, X TEXT)
LANGUAGE plpgsql
AS $$
DECLARE
    row_data RECORD;
	row_data2 RECORD;
	row_data3 RECORD;
	CURR_GROUP INT;
BEGIN
	SELECT MAX(GROUP_ID)+1 INTO CURR_GROUP FROM ORDERS;
	IF CURR_GROUP IS NULL THEN
		CURR_GROUP := 1;
	END IF;
	FOR row_data IN (
		SELECT STOREFRONT_ID, person_id, SUM(quantity * price) AS total_amount
		FROM CART C JOIN PRODUCT P USING (PRODUCT_ID)
		WHERE person_id = input_person_id
		GROUP BY storefront_id, PERSON_ID
	)
	LOOP
		--RAISE NOTICE 'HELLO';
		INSERT INTO TRANSACTIONS (PERSON_ID, STOREFRONT_ID, AMOUNT, TRANSACTION_TYPE) VALUES (
			row_data.person_id, row_data.storefront_id, row_data.total_amount, X
		) returning * into row_data2;
		
		INSERT INTO ORDERS (PRODUCT_ID, QUANTITY, PERSON_ID, TRANSACTION_ID, GROUP_ID, PRICE)
		SELECT PRODUCT_ID, QUANTITY, PERSON_ID, row_data2.transaction_id, CURR_GROUP, P.PRICE
		FROM CART C JOIN PRODUCT P USING(PRODUCT_ID)
		WHERE PERSON_ID = row_data2.person_id AND STOREFRONT_ID = row_data2.storefront_id;
		
			
	END LOOP;
	DELETE 
	FROM CART
	WHERE PERSON_ID = INPUT_PERSON_ID;

	--inserting into PLSQ_LOG
	INSERT INTO PLSQL_LOG (PERSON_ID, FUNCTION_NAME, PARAMETERS)
	VALUES (input_person_id, 'process_cart_and_transactions', 'PARAMETERS {input_person_id: ' || input_person_id || ' X: ' || X || '}');
END $$;


--delete product procedure

CREATE OR REPLACE PROCEDURE delete_product_procedure(IN prdid INT, IN pid INT)
LANGUAGE plpgsql
AS $$
DECLARE
	storeid INTEGER;
BEGIN
	INSERT INTO DELETED_PRODUCT (PRODUCT_ID, STOREFRONT_ID, PRODUCT_NAME, PRODUCT_DESCRIPTION, PRICE)
		SELECT PRODUCT_ID, STOREFRONT_ID, PRODUCT_NAME, PRODUCT_DESCRIPTION, PRICE FROM PRODUCT WHERE PRODUCT_ID = prdid;

	SELECT STOREFRONT_ID INTO storeid FROM PRODUCT WHERE PRODUCT_ID = prdid;

	INSERT INTO ACTION_LOG (storefront_id, product_id, action_type) VALUES(storeid, prdid, 'DELETE');

	DELETE FROM PRODUCT WHERE PRODUCT_ID = prdid;
	
	DELETE FROM tag_assignment WHERE PRODUCT_ID = prdid;

	--inserting into PLSQ_LOG
	INSERT INTO PLSQL_LOG (PERSON_ID, FUNCTION_NAME, PARAMETERS)
	VALUES (pid, 'delete_product_procedure', 'PARAMETERS {prdid: ' || prdid || ' pid: ' || pid || '}');
END $$;


--delete store procedure

CREATE OR REPLACE PROCEDURE delete_storefront_procedure(IN pid INT, IN strid INT)
LANGUAGE plpgsql
AS $$
DECLARE
	i PRODUCT%ROWTYPE;
BEGIN
	INSERT INTO DELETED_STOREFRONT (STOREFRONT_ID, STOREFRONT_NAME, STOREFRONT_DESCRIPTION)
		SELECT STOREFRONT_ID, STOREFRONT_NAME, STOREFRONT_DESCRIPTION FROM STOREFRONT WHERE STOREFRONT_ID = strid;

	INSERT INTO ACTION_LOG (person_id, storefront_id, action_type) VALUES(pid, strid, 'DELETE');

	FOR i IN (SELECT * FROM PRODUCT WHERE STOREFRONT_ID = strid)
	LOOP
		CALL delete_product_procedure(i.product_id, pid);
	END LOOP;

	DELETE FROM STOREFRONT WHERE STOREFRONT_ID = strid;

	
	--inserting into PLSQ_LOG
	INSERT INTO PLSQL_LOG (PERSON_ID, FUNCTION_NAME, PARAMETERS)
	VALUES (pid, 'delete_storefront_procedure', 'PARAMETERS {pid: ' || pid || ' strid: ' || strid || '}');
END $$;


--delete person procedure

CREATE OR REPLACE PROCEDURE delete_person_procedure(IN pid INT)
LANGUAGE plpgsql
AS $$
DECLARE
	R MANAGES%ROWTYPE;
	managercount INT;
BEGIN
	INSERT INTO DELETED_PERSON (PERSON_ID, PERSON_NAME, DATE_OF_BIRTH, PHONE, EMAIL)
		SELECT PERSON_ID, PERSON_NAME, DATE_OF_BIRTH, PHONE, EMAIL FROM PERSON WHERE PERSON_ID = pid;

	INSERT INTO ACTION_LOG (person_id, action_type) VALUES(pid, 'DELETE');

	CALL clear_cart_procedure(pid);

	FOR R in (SELECT * FROM MANAGES WHERE PERSON_ID = pid)
	LOOP
		SELECT COUNT(*) INTO managercount FROM MANAGES WHERE STOREFRONT_ID = R.STOREFRONT_ID;
		IF managercount = 1 THEN
			CALL delete_storefront_procedure(pid, R.STOREFRONT_ID);
		END IF;
	END LOOP;


	DELETE FROM PERSON WHERE PERSON_ID = pid;

	--inserting into PLSQ_LOG
	INSERT INTO PLSQL_LOG (PERSON_ID, FUNCTION_NAME, PARAMETERS)
	VALUES (pid, 'delete_person_procedure', 'PARAMETERS {pid: ' || pid || '}');
END $$;


--clear cart
CREATE OR REPLACE PROCEDURE clear_cart_procedure(
	IN pid INTEGER
)
LANGUAGE plpgsql
AS $$
DECLARE
	i CART%ROWTYPE;
BEGIN
	FOR i IN (SELECT * FROM CART WHERE PERSON_ID = pid)
	LOOP
		UPDATE PRODUCT SET STOCK_COUNT = STOCK_COUNT + i.quantity WHERE PRODUCT_ID = i.product_id;
	END LOOP;
	DELETE FROM CART WHERE PERSON_ID = pid;

	--inserting into PLSQ_LOG
	INSERT INTO PLSQL_LOG (PERSON_ID, FUNCTION_NAME, PARAMETERS)
	VALUES (pid, 'clear_cart_procedure', 'PARAMETERS {pid: ' || pid || '}');
END $$;







--FUNCTIONS

--check reg parameters
CREATE OR REPLACE FUNCTION check_credentials_function(
    IN phone_in TEXT,
	IN email_in TEXT
)
RETURNS BOOLEAN AS
$$
DECLARE
	emailcount INT;
	phonecount INT;
	phonelen INT;
BEGIN
	--inserting into PLSQ_LOG
	INSERT INTO PLSQL_LOG (PERSON_ID, FUNCTION_NAME, PARAMETERS)
	VALUES (NULL, 'check_credentials_function', 'PARAMETERS {phone_in: ' || phone_in || ' email_in: ' || email_in || '}');

    phonelen := LENGTH(phone_in);
	SELECT COUNT(*) INTO phonecount FROM PERSON WHERE PHONE = phone_in;
	SELECT COUNT(*) INTO emailcount FROM PERSON WHERE EMAIL = email_in;
	IF phonecount > 0 OR emailcount > 0 OR phonelen != 11 THEN
		RETURN FALSE;
	ELSE
		RETURN TRUE;
	END IF;
END;
$$
LANGUAGE plpgsql;



--check add to cart
CREATE OR REPLACE FUNCTION add_to_cart_function(
	IN pid INTEGER,
	IN prdid INTEGER,
	IN qty INTEGER
)
RETURNS BOOLEAN AS
$$
DECLARE
	currstock INTEGER;
BEGIN
	--inserting into PLSQ_LOG
	INSERT INTO PLSQL_LOG (PERSON_ID, FUNCTION_NAME, PARAMETERS)
	VALUES (pid, 'add_to_cart_function', 'PARAMETERS {pid: ' || pid || ' prdid: ' || prdid || ' qty: ' || qty || '}');

	SELECT STOCK_COUNT INTO currstock FROM PRODUCT WHERE PRODUCT_ID = prdid;
	IF qty > currstock THEN
		RETURN FALSE;
	ELSE
		INSERT INTO CART (PERSON_ID, PRODUCT_ID, QUANTITY) VALUES (pid, prdid, qty) ON CONFLICT (PERSON_ID, PRODUCT_ID) DO UPDATE SET QUANTITY = CART.QUANTITY + EXCLUDED.QUANTITY;
		UPDATE PRODUCT SET STOCK_COUNT = STOCK_COUNT - qty WHERE PRODUCT_ID = prdid;
		RETURN TRUE;
	END IF;
END;
$$
LANGUAGE plpgsql;



--find manager function
CREATE OR REPLACE FUNCTION is_manager_of_product(per_id INT, prod_id INT)
RETURNS INT AS $$
DECLARE
	RES INT;
BEGIN
	--inserting into PLSQ_LOG
	INSERT INTO PLSQL_LOG (PERSON_ID, FUNCTION_NAME, PARAMETERS)
	VALUES (per_id, 'is_manager_of_product', 'PARAMETERS {per_id: ' || per_id || ' prod_id: ' || prod_id || '}');

	SELECT M.PERSON_ID INTO RES
	FROM PRODUCT P JOIN STOREFRONT S ON(S.STOREFRONT_ID = P.STOREFRONT_ID) JOIN MANAGES M ON (S.STOREFRONT_ID = M.STOREFRONT_ID)
	WHERE P.PRODUCT_ID = prod_id and M.PERSON_ID = per_id;
	if RES IS NULL THEN
		RETURN 0;
	ELSE 
		RETURN 1;
	END IF;
END;
$$ LANGUAGE plpgsql;



CREATE OR REPLACE FUNCTION is_manager_of_storefront(per_id int, s_id int)
  RETURNS int
AS $$
DECLARE
    RES INT;
BEGIN
	--inserting into PLSQ_LOG
	INSERT INTO PLSQL_LOG (PERSON_ID, FUNCTION_NAME, PARAMETERS)
	VALUES (per_id, 'is_manager_of_storefront', 'PARAMETERS {per_id: ' || per_id || ' s_id: ' || s_id || '}');

    SELECT COUNT(*) INTO RES 
    FROM MANAGES 
    WHERE PERSON_ID = per_id AND STOREFRONT_ID = s_id;
    RETURN RES;
END;
$$ LANGUAGE plpgsql;







--TRIGGERS

--person create trigger
CREATE OR REPLACE FUNCTION person_insert_trigger_function()
RETURNS TRIGGER AS $$
BEGIN
    -- Inserting data into ACTION_LOG table
    INSERT INTO ACTION_LOG (person_id, action_type)
    VALUES (NEW.person_id, 'CREATE');
    
    -- Returning the NEW row, as this is an INSERT trigger
    RETURN NEW;
END;
$$ LANGUAGE plpgsql;

-- Creating the trigger
CREATE OR REPLACE TRIGGER person_insert_trigger
AFTER INSERT ON PERSON
FOR EACH ROW
EXECUTE FUNCTION person_insert_trigger_function();


--store create trigger
CREATE OR REPLACE FUNCTION store_insert_trigger_function()
RETURNS TRIGGER AS $$
BEGIN
		IF (SELECT COUNT(*) FROM manages WHERE storefront_id = NEW.storefront_id) > 1 THEN
			-- Inserting data into ACTION_LOG table
			INSERT INTO ACTION_LOG (person_id, storefront_id, action_type)
			VALUES (NEW.person_id, NEW.storefront_id, 'ADD');
		ELSE
			INSERT INTO ACTION_LOG (person_id, storefront_id, action_type)
			VALUES (NEW.person_id, NEW.storefront_id, 'CREATE');
		END IF;
    -- Returning the NEW row, as this is an INSERT trigger
    RETURN NEW;
END;
$$ LANGUAGE plpgsql;

-- Creating the trigger
CREATE OR REPLACE TRIGGER store_insert_trigger
AFTER INSERT ON manages
FOR EACH ROW
EXECUTE FUNCTION store_insert_trigger_function();


--product create trigger
CREATE OR REPLACE FUNCTION product_insert_trigger_function()
RETURNS TRIGGER AS $$
BEGIN

		-- Inserting data into ACTION_LOG table
		INSERT INTO ACTION_LOG (storefront_id, product_id, action_type)
		VALUES (NEW.storefront_id, NEW.product_id, 'CREATE');
		-- Returning the NEW row, as this is an INSERT trigger
    RETURN NEW;
END;
$$ LANGUAGE plpgsql;

-- Creating the trigger
CREATE OR REPLACE TRIGGER product_insert_trigger
AFTER INSERT ON product
FOR EACH ROW
EXECUTE FUNCTION product_insert_trigger_function();


--product purchase trigger
CREATE OR REPLACE FUNCTION product_purchase_trigger_function()
RETURNS TRIGGER AS $$
BEGIN
    -- Updating data in product table
	UPDATE PRODUCT SET items_sold = (SELECT items_sold FROM PRODUCT WHERE product_id = NEW.product_id) + NEW.quantity WHERE product_id = NEW.product_id;
    
    -- Returning the NEW row, as this is an UPDATE trigger
    RETURN NEW;
END;
$$ LANGUAGE plpgsql;

-- Creating the trigger
CREATE OR REPLACE TRIGGER product_purchase_trigger
AFTER INSERT ON ORDERS
FOR EACH ROW
EXECUTE FUNCTION product_purchase_trigger_function();